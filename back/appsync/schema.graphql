type Mutation {

    createIdea(
		title: String!,
		content: String,
		isPrivate: Boolean,
		tags: [String]
	): Idea!

	deleteIdea(
	    ideaId: String!,
    ): Idea!

	updateIdea(
	    ideaId: String!,
	    content: String!,
		title: String!,
		ideaDate: String
    ): Idea!

	addComment(
	    body: String!,
	    ideaId: String!,
		ideaOwnerId: String!,
    ): AddCommentResult!

	deleteComment(
		ideaId: String!,
		ideaOwnerId: String!,
		commentId: String!
	): Result

	addTags(
	    tags: [TagInput],
    ): [Tag]

	deleteTag(tag: TagInput): Tag

	followUser(
	    userId: String!
    ): Result!

	unfollowUser(
	    userId: String!
    ): Result!

    toggleEmailNotifications(
		state: EmailNotificationsState!
    ): ToggleNotificationsStateResult!

	updateProfileInfo(
		name: String
	): UserInfo

	toggleIdeaVisibility(
		ideaId: String!,
		ideaOwnerId: String!,
		state: IdeaVisibilityState
	): ToggleIdeaVisibilityResult!

    shareIdea(
		ideaId: String!,
		ideaOwnerId: String!,
		email: String!,
	):Result

	likeIdea(
	    ideaId: String!
		ideaOwnerId: String!
    ): LikeResult

	unlikeIdea(
	    ideaId: String!
    ): LikeResult
}


input TagInput {
   tag: String!
   ideaId: String!
}

type Query {
	meInfo: User!

	userInfo(userId: String!): UserInfoResult!
	@aws_api_key @aws_cognito_user_pools

	ideas(nextToken: String, limit: Int): IdeaConnection
	userIdeas(userId: String!, nextToken: String, limit: Int): IdeaConnection
	getMyIdea(ideaId: String!): Idea!

	@aws_api_key @aws_cognito_user_pools
	getUsersIdeas(userId: String!): IdeaConnection!
	@aws_api_key @aws_cognito_user_pools
	getUsersIdea(userId: String!, ideaId: String!): Idea!
	@aws_api_key @aws_cognito_user_pools
	getPublicIdeas(nextToken: String, limit: Int): IdeaConnection!
	@aws_api_key @aws_cognito_user_pools
	getLikedIdeas(nextToken: String, limit: Int): IdeaConnection
	ideaTags(ideaId: String!): [Tag!]!
	getIsIdeaLikedByMe(
		ideaId: String!
	): IsLikedResult
	getComments(ideaId: String!, nextToken: String, limit: Int): CommentsConnection!
	@aws_api_key @aws_cognito_user_pools
}

type LikeResult {
	result: Result!
	likesCount: Int
}

type UserInfoResult @aws_api_key @aws_cognito_user_pools{
	result: Result!
	userInfo: UserInfo
}

type AddCommentResult {
	result: Result!
	comment: Comment
}

type ToggleNotificationsStateResult {
	state: EmailNotificationsState!
}

type ToggleIdeaVisibilityResult {
	state: IdeaVisibilityState!
}

type IsLikedResult {
	result: Result!
	isLiked: Boolean
}

type Tag {
   tag: String!
   ideaId: String!
}

type Idea @aws_api_key @aws_cognito_user_pools {
	ideaId: String!
	content: String
	title: String
	userId: String
	createdDate: String
	ideaDate: String
	likesCount: Int
	commentsCount: Int
	visibility: IdeaVisibilityState
}


type User {
	user_id: String!
	email: String!
	ideas(limit: Int!, nextToken: String): IdeaConnection
}

type UserInfo  @aws_api_key @aws_cognito_user_pools{
	userId: String!
	followersCount: Int
	followeesCount: Int
	ideasCreated: Int
	name: String

	isFollowingByMe: Boolean
	followsMe: Boolean
}

type Comment @aws_api_key @aws_cognito_user_pools{
	body: String!
	userId: String!
	commentId: String!
}

type Result  @aws_api_key @aws_cognito_user_pools{
	error: String
	ok: Boolean!
}


type  IdeaConnection @aws_api_key @aws_cognito_user_pools {
	items: [Idea!]!
	nextToken: String
}

type  CommentsConnection @aws_api_key @aws_cognito_user_pools {
	items: [Comment!]!
	nextToken: String
}

enum EmailNotificationsState {
	DISABLED,
	DAILY,
	WEEKLY,
	DAILY_AND_WEEKLY
}

enum IdeaVisibilityState {
	PRIVATE,
	PUBLIC
}

schema {
	query: Query
	mutation: Mutation
}
