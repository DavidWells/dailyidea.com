service: dailyidea-appsync-backend

provider:
  name: aws
  runtime: 'python3.6'
  stage: ${env:STAGE, 'local'}
  region: ${env:AWS_REGION, 'us-east-1'}
  domainName: ${env:DOMAIN_NAME, 'beta.dailyidea.com'}

plugins:
  - serverless-offline
  - serverless-appsync-plugin

functions:
  getLikedIdeas:
    handler: functions.get_liked_ideas.get_liked_ideas.endpoint
    role: LambdaGetLikedIdeasFunctionRole
    memorySize: 512
    environment:
      LIKES_TABLE_NAME: dailyidea-likes-${self:provider.stage}
      IDEAS_TABLE_NAME: dailyidea-ideas-${self:provider.stage}
  developmentLogger:
    handler: functions.development_logger.development_logger.endpoint
    role: LambdaDevelopmentLoggerFunctionRole
    memorySize: 128

custom:
  cogintoUserPoolId: ${env:COGNITO_POOL_ID}
  usersTableName: dailyidea-users-${self:provider.stage}
  ideasTableName: dailyidea-ideas-${self:provider.stage}
  tagsTableName: dailyidea-tags-${self:provider.stage}
  likesTableName: dailyidea-likes-${self:provider.stage}
  ideasMailBox: ${env:IDEAS_MAILBOX, 'ideas-dev'}
  secretToken: ${env:SECRET_TOKEN, 'secret-tk1x'}
  appSync:
    # name:  # defaults to api
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      defaultEffect: ALLOW
      userPoolId: ${self:custom.cogintoUserPoolId}
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: Ideas
        type: Query
        field: getIdea
        request: "getIdea-request-mapping-template.txt"
        response: "getIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Query
        field: ideas
        request: "ideas-request-mapping-template.txt"
        response: "ideas-response-mapping-template.txt"
      - dataSource: Users
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"
      - dataSource: Users
        type: Mutation
        field: followUser
        request: "followUser-request-mapping-template.txt"
        response: "followUser-response-mapping-template.txt"
      - dataSource: Users
        type: Mutation
        field: unfollowUser
        request: "unfollowUser-request-mapping-template.txt"
        response: "unfollowUser-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: createIdea
        request: "createIdea-request-mapping-template.txt"
        response: "createIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: addComment
        request: "addComment-request-mapping-template.txt"
        response: "addComment-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: deleteComment
        request: "deleteComment-request-mapping-template.txt"
        response: "deleteComment-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: deleteIdea
        request: "deleteIdea-request-mapping-template.txt"
        response: "deleteIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: updateIdea
        request: "updateIdea-request-mapping-template.txt"
        response: "updateIdea-response-mapping-template.txt"
      - dataSource: Tags
        type: Mutation
        field: deleteTag
        request: "deleteTag-request-mapping-template.txt"
        response: "deleteTag-response-mapping-template.txt"
      - dataSource: Tags
        type: Mutation
        field: addTags
        request: "addTags-request-mapping-template.txt"
        response: "addTags-response-mapping-template.txt"
      - dataSource: Tags
        type: Query
        field: ideaTags
        request: "getIdeaTags-request-mapping-template.txt"
        response: "getIdeaTags-response-mapping-template.txt"
      - dataSource: Likes
        type: Mutation
        field: likeIdea
        request: "like-idea/before-mapping-template.txt"
        response: "like-idea/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - createLikedIdeaItem
          - increaseIdeaLikesCount
#          - logResults
      - dataSource: Likes
        type: Mutation
        field: unlikeIdea
        request: "unlike-idea/before-mapping-template.txt"
        response: "unlike-idea/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - deleteLikedIdeaItem
          - decreaseIdeaLikesCount
      - type: Query
        field: getLikedIdeas
        dataSource: LikedIdeasHandler
        request: "getLikedIdeas-request-mapping-template.txt"
        response: "getLikedIdeas-response-mapping-template.txt"
      - dataSource: Likes
        type: Query
        field: getIsIdeaLikedByMe
        request: "getIsIdeaLikedByMe-request-mapping-template.txt"
        response: "getIsIdeaLikedByMe-response-mapping-template.txt"
    #      - dataSource: RequestLink
#        type: Mutation
#        field: requestLogin
#        request: "requestLogin-request-mapping-template.txt"
#        response: "requestLogin-response-mapping-template.txt"
    # schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: LikedIdeasHandler
        description: 'Lambda Liked Ideas Data Source'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GetLikedIdeasLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: DevelopmentLoggerHandler
        description: 'Development purposes only. Insert into pipeline to log what are happening there=)'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [DevelopmentLoggerLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users table'
        config:
          tableName: ${self:custom.usersTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Ideas
        description: 'Ideas table'
        config:
          tableName: ${self:custom.ideasTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Tags
        description: 'Tags table'
        config:
          tableName: ${self:custom.tagsTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Likes
        description: 'Likes table'
        config:
          tableName: ${self:custom.likesTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
    functionConfigurations:
      - dataSource: Likes
        name: createLikedIdeaItem
        request: 'like-idea/createLikedIdeaItem-request-mapping-template.txt'
        response: 'like-idea/createLikedIdeaItem-response-mapping-template.txt'
      - dataSource: Likes
        name: deleteLikedIdeaItem
        request: 'unlike-idea/deleteLikedIdeaItem-request-mapping-template.txt'
        response: 'unlike-idea/deleteLikedIdeaItem-response-mapping-template.txt'
      - dataSource: Ideas
        name: increaseIdeaLikesCount
        request: 'like-idea/increaseIdeaLikesCount-request-mapping-template.txt'
        response: 'like-idea/increaseIdeaLikesCount-response-mapping-template.txt'
      - dataSource: Ideas
        name: decreaseIdeaLikesCount
        request: 'unlike-idea/decreaseIdeaLikesCount-request-mapping-template.txt'
        response: 'unlike-idea/decreaseIdeaLikesCount-response-mapping-template.txt'
      - dataSource: DevelopmentLoggerHandler
        name: logResults
        request: 'development-logger/request-request-mapping-template.txt'
        response: 'development-logger/response-response-mapping-template.txt'
#      - type: AWS_LAMBDA
#        name: RequestLink
#        description: 'Lambda DataSource'
#        config:
#          lambdaFunctionArn:
#            Fn::GetAtt:
#              - RequestLoginLambdaFunction
#              - Arn
#          serviceRoleArn:
#            Fn::GetAtt:
#              - AppSyncServiceRole
#              - Arn


resources:
  - Resources:
      LambdaGetLikedIdeasFunctionRole: ${file(functions/get_liked_ideas/function_role.yml):LambdaGetLikedIdeasFunctionRole}
      LambdaDevelopmentLoggerFunctionRole: ${file(functions/development_logger/function_role.yml):LambdaDevelopmentLoggerFunctionRole}
      AppSyncLambdaServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: "Lambda-AppSyncServiceRole"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "appsync.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: "Lambda-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource:
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-dev-getLikedIdeas"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-dev-getLikedIdeas:*"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-dev-developmentLogger"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-dev-developmentLogger:*"

      AppSyncServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: "Dynamo-Lambda-AppSyncServiceRole"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "appsync.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: "Dynamo-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "dynamodb:Query"
                      - "dynamodb:BatchWriteItem"
                      - "dynamodb:GetItem"
                      - "dynamodb:DeleteItem"
                      - "dynamodb:PutItem"
                      - "dynamodb:Scan"
                      - "dynamodb:UpdateItem"
                    Resource:
                      - { "Fn::GetAtt": ["TagsTable", "Arn" ] }
                      - { "Fn::GetAtt": ["LikesTable", "Arn" ] }
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.usersTableName}'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.usersTableName}/*'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.ideasTableName}'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.tagsTableName}/*'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.likesTableName}/*'
            - PolicyName: "Lambda-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource:
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-requestLogin"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-requestLogin:*"
                  - Effect: Allow
                    Action:
                      - ses:SendEmail
                    Resource: "*"
  - ${file(resources/dynamo-tags-table.yml)}
  - ${file(resources/dynamo-likes-table.yml)}