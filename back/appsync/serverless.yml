service: dailyidea-appsync-backend

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:STAGE, 'local'}
  region: ${env:AWS_REGION, 'us-east-1'}
  domainName: ${env:DOMAIN_NAME, 'beta.dailyidea.com'}

plugins:
  - serverless-offline
  - serverless-appsync-plugin

functions:
  graphql:
    handler: handler.graphqlHandler

custom:
  cogintoUserPoolId: ${env:COGNITO_POOL_ID}
  usersTableName: dailyidea-users-${self:provider.stage}
  ideasTableName: dailyidea-ideas-${self:provider.stage}
  tagsTableName: dailyidea-tags-${self:provider.stage}
  ideasMailBox: ${env:IDEAS_MAILBOX, 'ideas-dev'}
  secretToken: ${env:SECRET_TOKEN, 'secret-tk1x'}
  appSync:
    # name:  # defaults to api
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      defaultEffect: ALLOW
      userPoolId: ${self:custom.cogintoUserPoolId}
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: Ideas
        type: Query
        field: getIdea
        request: "getIdea-request-mapping-template.txt"
        response: "getIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Query
        field: ideas
        request: "ideas-request-mapping-template.txt"
        response: "ideas-response-mapping-template.txt"
      - dataSource: Users
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: createIdea
        request: "createIdea-request-mapping-template.txt"
        response: "createIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: addComment
        request: "addComment-request-mapping-template.txt"
        response: "addComment-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: deleteComment
        request: "deleteComment-request-mapping-template.txt"
        response: "deleteComment-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: deleteIdea
        request: "deleteIdea-request-mapping-template.txt"
        response: "deleteIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: updateIdea
        request: "updateIdea-request-mapping-template.txt"
        response: "updateIdea-response-mapping-template.txt"
    #      - dataSource: RequestLink
#        type: Mutation
#        field: requestLogin
#        request: "requestLogin-request-mapping-template.txt"
#        response: "requestLogin-response-mapping-template.txt"
    # schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: LambdaHandler
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users table'
        config:
          tableName: ${self:custom.usersTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Ideas
        description: 'Ideas table'
        config:
          tableName: ${self:custom.ideasTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Tags
        description: 'Tags table'
        config:
          tableName: ${self:custom.tagsTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
#      - type: AWS_LAMBDA
#        name: RequestLink
#        description: 'Lambda DataSource'
#        config:
#          lambdaFunctionArn:
#            Fn::GetAtt:
#              - RequestLoginLambdaFunction
#              - Arn
#          serviceRoleArn:
#            Fn::GetAtt:
#              - AppSyncServiceRole
#              - Arn


resources:
  Resources:
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-dev-graphql"
                    - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-dev-graphql:*"
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Dynamo-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/${self:custom.usersTableName}'
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/${self:custom.usersTableName}/*'
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/${self:custom.ideasTableName}'
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/${self:custom.tagsTableName}/*'
          - PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-requestLogin"
                    - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-requestLogin:*"
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                  Resource: "*"
